`timescale 1ns / 1ps
module tb_memory;

    reg [7:0] data_in;
    reg [2:0] col_addr, row_addr;
    reg wrt_read, reset, clk;
    wire [7:0] data_out;

    // Instantiate the module
    memory_8x8 uut (
        .data_in(data_in),
        .col_addr(col_addr),
        .row_addr(row_addr),
        .wrt_read(wrt_read),
        .reset(reset),
        .clk(clk),
        .data_out(data_out)
    );

    // Clock generator
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns clock period
    end

    // Test procedure
    initial begin
       // Initial values
    reset    = 1'b1;           
    wrt_read = 1'b0;           
    data_in  = 8'b00000000;
    row_addr = 3'b000; 
    col_addr = 3'b000;

    #20;                       
    reset = 1'b0;             
    #10;                      

        // Write 1 to [0][0]
        wrt_read = 0;
        row_addr = 3'b000; col_addr = 3'b000;
        data_in = 8'b00000001;
        #10;

        // Write 1 to [1][2]
        row_addr = 3'b001; col_addr = 3'b010;
        data_in = 8'b00000100;
        #10;

        // Read row 0
        wrt_read = 1;
        row_addr = 3'b000; col_addr = 3'b000;
        #10;
        
        row_addr = 3'b001; col_addr = 3'b010;
        #10;

        wrt_read = 1'b0;
        row_addr = 3'b010; col_addr = 3'b001; 
        data_in  = 8'b00100111;              
        #10; 

        wrt_read = 1'b1;
        row_addr = 3'b010; col_addr = 3'b001;
        #10;

        

        // Finish
        $finish;
    end

endmodule
