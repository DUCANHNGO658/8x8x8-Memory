`timescale 1ns / 1ps

module memory_8x8x8_tb;
reg [7:0] data_in;
reg [2:0] col_addr;
reg [2:0] row_addr;
reg [2:0] layer;
reg wrt_read;
reg reset;
reg clk;

wire [7:0] data_out;
Memory_8x8x8 dut (
.data_in(data_in),
.col_addr(col_addr),
.row_addr(row_addr),
.layer(layer),
.wrt_read(wrt_read),
.reset(reset),
.clk(clk),
.data_out(data_out)
 );
 // 10ns period
always #5 clk = ~clk;

initial begin
clk = 0;
reset = 1;
wrt_read = 0;
data_in = 8'b00000000;
row_addr = 3'b000;
col_addr = 3'b000;
layer = 3'b000;

// Wait for global reset
#10;
reset = 0;
// Test case 1: Write to memory[1][2][3] = 8'b10101010
data_in = 8'b10101010;
row_addr = 3'b001;
col_addr = 3'b010;
layer    = 3'b011;
wrt_read = 0; // Write enable
#10;

// Test case 2: Read from memory[1][2][3]
data_in = 8'b00000000; // should be ignored
wrt_read = 1; // Read enable
#10;
// Test case 3: Read from another location (should return 0)
row_addr = 3'b000;
col_addr = 3'b000;
layer    = 3'b000;
#10;
$stop;
end
endmodule
